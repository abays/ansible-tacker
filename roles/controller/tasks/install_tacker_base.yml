---
- name: install git and pip
  yum: name={{ item }} state=present
  with_items:
   - git
   - python-pip

- name: ensure Neutron uses port_security extension driver
  lineinfile: dest=/etc/neutron/plugins/ml2/ml2_conf.ini regexp=^extension_drivers\s*= line='extension_drivers = port_security'
  register: neutron_conf

- name: restart Neutron server
  command: pcs resource restart neutron-server
  when: neutron_conf.changed

- name: ensure Heat policy stuff
  lineinfile: dest=/etc/heat/policy.json regexp=^\"resource_types:OS::Nova::Flavor\":\s*\" line='"resource_types:OS::Nova::Flavor": "role:admin"'
  register: heat_policy

- name: restart Heat engine
  command: pcs resource restart heat-engine
  when: heat_policy.changed

- name: create Tacker database
  command: >
    mysql --execute "CREATE DATABASE tacker"

- name: set Tacker database permissions
  command: >
    mysql --execute "GRANT ALL PRIVILEGES ON tacker.* TO 'tacker'@'localhost' IDENTIFIED BY '{{ tacker_password }}'; 
    GRANT ALL PRIVILEGES ON tacker.* TO 'tacker'@'%' IDENTIFIED BY '{{ tacker_password }}'"

- name: create Tacker user
  shell: >
    source {{ tacker_overcloudrc }};
    openstack user create --password {{ tacker_password }} tacker

- name: give Tacker user admin role
  shell: >
    source {{ tacker_overcloudrc }};
    openstack role add --project {{ tacker_project_name }} --user tacker admin

- name: create Tacker service
  shell: >
    source {{ tacker_overcloudrc }};
    openstack service create --name tacker --description "Tacker Project" nfv-orchestration

- name: acquire Tacker service ID
  shell: >
    source {{ tacker_overcloudrc }};
    openstack service show tacker | grep "| id" | awk '{print $4}'
  register: tacker_service_id

- name: acquire controller IP
  shell: pcs config | grep -m 1 "start ip-" | awk '{print $2}' | cut -d "-" -f 2
  register: controller_ip

- name: create Tacker endpoints
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint create --region {{ tacker_region }} --publicurl 'http://{{ controller_ip }}:{{ tacker_port }}/' 
    --adminurl 'http://{{ controller_ip }}:{{ tacker_port }}/' --internalurl 'http://{{ controller_ip }}:{{ tacker_port }}/' 
    {{ tacker_service_id }}

- name: install libffi-devel
  yum: name=libffi-devel state=present

- name: clone Tacker code
  git: repo={{ tacker_base_repo }} accept_hostkey=yes version={{ tacker_branch }} dest=/root/

- name: make Tacker conf dir
  command: mkdir /etc/tacker

- name: make Tacker log dir
  command: mkdir /var/log/tacker

- name: copy Tacker conf source, but abandon tacker.conf
  shell: >
    cp -r /root/tacker/etc/tacker/* /etc/tacker/;
    rm -f /etc/tacker/tacker.conf

- name: create tacker.conf
  template: src=tacker.conf.j2 dest=/etc/tacker/tacker.conf

- name: install Tacker dependencies
  shell: >
    cd /root/tacker;
    pip install -r requirements.txt

- name: upgrade Python six package
  command: pip install six --upgrade

- name: install TOSCA parser
  command: pip install tosca-parser

- name: install Tacker
  shell: >
    cd /root/tacker;
    python setup.py install

- name: create default VIM config
  template: src=vim_config.yaml.j2 dest=/root/vim_config.yaml

- name: configure Tacker database
  command: /usr/bin/tacker-db-manage --config-file /etc/tacker/tacker.conf upgrade head

- name: create Tacker systemd service
  template: src=tacker-server.service dest=/usr/lib/systemd/system/tacker-server.service

- name: start Tacker systemd service
  systemd: state=started enabled=yes daemon_reload=yes name=tacker-server
