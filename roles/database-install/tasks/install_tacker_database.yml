---
- name: create Tacker database
  command: mysql --execute "CREATE DATABASE tacker"
  register: tacker_database
  failed_when: tacker_database.stderr != '' and 'database exists' not in tacker_database.stderr
  become: true

- name: set Tacker database permissions
  shell: >
    mysql --execute "GRANT ALL PRIVILEGES ON tacker.* TO 'tacker'@'localhost' IDENTIFIED BY '{{ tacker_password }}'; 
    GRANT ALL PRIVILEGES ON tacker.* TO 'tacker'@'%' IDENTIFIED BY '{{ tacker_password }}'"
  become: true

- name: create Tacker user
  shell: >
    source {{ tacker_overcloudrc }};
    openstack user create --password {{ tacker_password }} tacker
  register: tacker_database_user
  failed_when: tacker_database_user.stderr != '' and 'Duplicate Entry' not in tacker_database_user.stderr
  become: true

- name: give Tacker user admin role
  shell: >
    source {{ tacker_overcloudrc }};
    openstack role add --project {{ tacker_project_name }} --user tacker admin
  register: tacker_database_user_admin_role
  failed_when: tacker_database_user_admin_role.stderr != '' and 'already has role' not in tacker_database_user_admin_role.stderr
  become: true

- name: check for Tacker service ID
  shell: >
    source {{ tacker_overcloudrc }};
    openstack service show tacker | grep "| id" | awk '{print $4}'
  register: tacker_service_id_check
  become: true

- name: create Tacker service
  shell: >
    source {{ tacker_overcloudrc }};
    openstack service create --name tacker --description "Tacker Project" nfv-orchestration
  when: (tacker_service_id_check.stdout == '')
  become: true

- name: acquire Tacker service ID
  shell: >
    source {{ tacker_overcloudrc }};
    openstack service show tacker | grep "| id" | awk '{print $4}'
  register: tacker_service_id
  become: true

- name: acquire controller IP
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint show heat | grep publicurl | awk '{print $4}' | cut -d ":" -f 2 | cut -d "/" -f 3
  register: controller_ip
  become: true

- name: acquire admin URL
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint show nova | grep adminurl | awk {'print $4'}
  register: admin_url
  become: true

- name: acquire admin IP
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint show nova | grep adminurl | awk {'print $4'} | cut -d "/" -f 3 | cut -d ":" -f 1
  register: admin_ip
  become: true

- name: acquire internal URL
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint show nova | grep internalurl | awk {'print $4'}
  register: internal_url
  become: true

- name: acquire internal IP
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint show nova | grep internalurl | awk {'print $4'} | cut -d "/" -f 3 | cut -d ":" -f 1
  register: internal_ip
  become: true

- name: acquire public URL
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint show nova | grep publicurl | awk {'print $4'}
  register: public_url
  become: true

- name: acquire public IP
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint show nova | grep publicurl | awk {'print $4'} | cut -d "/" -f 3 | cut -d ":" -f 1
  register: public_ip
  become: true

- name: acquire keystone auth IP
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint show keystone | grep adminurl | awk {'print $4'} | cut -d "/" -f 3 | cut -d ":" -f 1
  register: keystone_auth_ip
  become: true

- name: create Tacker endpoints
  shell: >
    source {{ tacker_overcloudrc }};
    openstack endpoint create --region {{ tacker_region }} --publicurl 'http://{{ hostvars[groups['tacker-server'][0]]['ansible_eth0']['ipv4']['address'] }}:{{ tacker_port }}/' --adminurl 'http://{{ hostvars[groups['tacker-server'][0]]['ansible_eth0']['ipv4']['address'] }}:{{ tacker_port }}/' --internalurl 'http://{{ hostvars[groups['tacker-server'][0]]['ansible_eth0']['ipv4']['address'] }}:{{ tacker_port }}/' {{ tacker_service_id.stdout }}
  when: (tacker_service_id_check.stdout == '')
  become: true
